from typing import Union, List, Dict, Tuple, Optional

from code_genie._cache import _CacheKey
from code_genie.client import Client, GetPandasExecutableRequest
from code_genie.genie.base import GenieBase


class _CacheKeyPandas(_CacheKey):
    inputs: Optional[Tuple[Tuple[str, str], ...]]
    columns: Tuple[str, ...]


class PandasGenie(GenieBase):
    """Pandas specific genie creator. This is specially configured to work with pandas dataframes.
    """

    def __init__(self,
                 instructions: Union[str, List[str]],
                 columns: Optional[List[str]] = None,
                 inputs: Optional[Dict[str, str]] = None,
                 allowed_imports: Optional[List[str]] = None,
                 override: bool = False,
                 client: Optional[Client] = None):
        """Initialize the Pandas Genie

        Args:
            instructions: text instructions on the task required to be performed. use the keywords in inputs argument
                to refer to the inputs.
            columns: a list of column names in the dataframe to be used as inputs. this helps the genie infer the
                correct column name even if a slightly misspelled name is provided in the instructions.
            inputs: a dictionary of inputs to the function. the keys are the names of the inputs and the values are
                small description of the inputs. a default input of "df" referring to a pandas dataframe will be used
                if not provided.
            allowed_imports: a list of imports which are allowed to be used in the code. note that this is not
                strictly enforced yet. default imports: ["pandas", "numpy", "math", "datetime", "matplotlib", "seaborn"]
            override: if a genie has been generated before with the same args, then it will be loaded from cache be
                default. set override to True to make a new API call and recreate the genie.
            client: an instance of the client to use for making requests to the api. if not provided, a new instance
                will be created.

        Returns:
            A callable which can be used to execute the code generated by the genie.
        """
        self._columns: Optional[List[str]] = self._process_columns(columns)
        super().__init__(instructions, inputs, allowed_imports, override, client)

    @staticmethod
    def _process_columns(columns: Optional[List[str]]) -> Optional[List[str]]:
        if columns is None:
            return columns
        # check input should be a list of strings
        if isinstance(input, str):
            raise TypeError("input should be an iterable, not a string")
        elif all(isinstance(item, str) for item in columns):
            return list(columns)
        else:
            raise TypeError("input should be an iterable of strings")

    def _get_code(self, client: Client) -> Tuple[str, str]:
        return client.get_pandas(
            GetPandasExecutableRequest(instructions=self._instructions,
                                       inputs=self._inputs,
                                       columns=self._columns,
                                       allowed_imports=self._allowed_imports))

    def _get_cache_key(self) -> _CacheKeyPandas:
        return _CacheKeyPandas(key=self.__class__.__name__,
                               instructions=self._instructions_hashable(),
                               inputs=self._input_hashable() if self._inputs else None,
                               allowed_imports=tuple(self._allowed_imports or []),
                               columns=tuple(self._columns or []))
